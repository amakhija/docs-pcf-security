---
title: TLS Connections in PCF Deployements
owner: Security
---

Pivotal Cloud Foundry (PCF) uses Transport Layer Security (TLS) protocols to secure connections between internal components, app containers, and customer hardware.

Within a PCF deployment, TLS secures connections between components like the BOSH Director and service tiles. PCF components also use TLS connections to secure communications with external hardware, such as customer load balancers.

In Pivotal Application Service (PAS), app instance containers have [identity credentials](#container-creds) that enable TLS communication by app instances.

## <a id="container-creds"></a> App Instance Container Identity Credentials

Each app instance container in PCF has its own identity credentials. This section is meant to help PCF operators and developers [understand](#cred-details) and [use](#use-creds) these credentials. 

### <a id="cred-details"></a> Understanding the Credentials

See the following table to learn about app instance identity credentials.

<table>
  <tr>
    <th style="width: 20%">Attribute</th>
    <th>Description</th>
  </tr>
  <tr>
    <th>Purpose</th>
    <td>
        <ul>
          <li>For app developers to enable secure TLS communications from their apps.</li>
          <li>For PCF to use internally to validate the identities of app instances.</li>
        </ul>
    </td>
  </tr>
  <tr>
    <th>Type</th>
    <td>
      <ul>
        <li>
          A PEM-encoded <a href="https://tools.ietf.org/html/rfc5280">X.509</a> certificate and <a href="https://tools.ietf.org/html/rfc3447">PKCS #1 RSA</a> private key. 
        </li>
      </ul>
    </td>
  </tr>
  <tr>
    <th>Location</th>
    <td>
        <ul>
          <li>PCF presents the certificate and private key to the app instance through the container filesystem. </li>
        </ul>
    </td>
  </tr>
  <tr>
    <th>Properties of certificate</th>
    <td>
        <ul>
          <li>The <b>Common Name</b> is the app instance GUID.</li>
          <li>The <b>Subject</b> of the certificate contains an <i>Organizational Unit</i> in the form of <code>app:APP-GUID</code>.</li>
          <li>The certificate contains a <b>Subject Alternative Name</b> (SAN) with the IP address for the app instance container.</li>
          <li>The certificate is valid for 24 hours after being issued.</li>
        </ul>
    </td>
  </tr>
  <tr>
    <th>Contents of certificate file</th>
    <td>
        <ul>
          <li>A chain of PEM-encoded certificates, with the instance-specific certificate first in the list and any intermediates following it.</li>
        </ul>
    </td>
  </tr>
  <tr>
    <th>Issuing authority</th>
    <td>
        <ul>
          <li>PCF includes a root Certificate Authority (CA) dedicated to app instance identity. This CA is saved in the system trust store for buildpack-based apps and in a file in <code>/etc/cf-system-certificates</code> in all app instance containers.</li>
        </ul>
    </td>
  </tr>
</table>



### <a id="use-creds"></a> Using the Credentials

If you want to enable secure TLS communications from an app using container instance identity credentials, ensure that you do the following:

* **Add the credentials to your development stack configuration:** 
  * The credentials must be present in your development stack configuration for your app to use them. You can retrieve the credentials through following environment variables, which PCF sets to the locations of key and certificate files.

        <table id='instance-certs' border="1" class="nice" >
          <tr>
            <th>Credential / Keypair Element</th>
            <th>Environment Variable</th>
            <th>Command to Retrieve Credential Value</th>
          </tr><tr>
            <td>Certificate Chain</td>
            <td><code>CF_INSTANCE_CERT</code></td>
            <td><code>cf ssh APP-NAME -c 'cat $CF_INSTANCE_CERT'</code></td>
          </tr><tr>
            <td>Private Key</td>
            <td><code>CF_INSTANCE_KEY</code></td>
            <td><code>cf ssh APP-NAME -c 'cat $CF_INSTANCE_KEY'</code></td>
          </tr>
        </table>
* **Reload the credential files before they expire:** 
  * PCF rotates the credentials shortly before the current certificate expires. Apps that use these credentials must reload the certificate and key file contents either periodically or in reaction to filesystem watcher events.
 
* **Configure external clients or servers to trust the root CA:**
  * To enable secure TLS communication between an app and a client or server external to PCF, you must configure the external client or server to trust the CA that issues app instance container identity credentials. See the _Issuing Authority_ row of the table in [Understanding the Credentials](#cred-details).

### <a id="more-info"></a> Additional Information

For more information about instance identity credentials, see the [Instance Identity](https://github.com/cloudfoundry/diego-release/blob/develop/docs/instance-identity.md) document in the diego-release repository.

## <a id="ciphers"></a> TLS Cipher Suites

By default, PCF uses a limited set of cipher suites to secure its internal communications. However, some components used in PCF, like the Gorouter and HAProxy, may support additional TLS cipher suites to accommodate older clients outside of PCF. 

<p class="note">The AWS Classic load balancer does not support the recommended TLS cipher suites. See <a href="../../adminguide/securing-traffic.html#ciphers">Securing Traffic into Cloud Foundry</a> for details and mitigations.</p>

For components that allow you to configure TLS cipher suites, only specify the TLS cipher suites that you need.

### <a id="cipher_recs"></a>TLS Cipher Suite Recommendations

The default and recommended version of TLS to use is TLS v1.2.

The recommended TLS cipher suites to use within PCF are the following:

<ul>
  <li>TLS_DHE_RSA_WITH_AES_128_GCM_SHA256</li>
	<li>TLS_DHE_RSA_WITH_AES_256_GCM_SHA384</li>
	<li>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</li>
	<li>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</li>
</ul>

###<a id="cipher_gorouter"></a> Gorouter Configuration

As part of your PAS networking configuration, you must specify the TLS cipher suites that the Gorouter uses to secure its communications. Only specify the cipher suites that you need.

The recommended TLS cipher suites for the Gorouter are:

<ul>
  <li>ECDHE-RSA-AES128-GCM-SHA256</li>
  <li>ECDHE-RSA-AES256-GCM-SHA384</li>
</ul>

You can specify other cipher suites and a different minimum version of TLS support if your deployment requires it. For a list of other cipher suites and other versions of TLS that are optionally supported by the Gorouter, see [Securing Traffic into Cloud Foundry](../../adminguide/securing-traffic.html#ciphers).

For instructions on how to configure the TLS cipher suites for the Gorouter, see the PAS installation documentation for the IaaS of your deployment. For example, if you are deploying PAS on GCP, see [Step 6: Configure Networking](../../customizing/gcp-er-config.html#networking). 

###<a id="cipher_haproxy"></a> HAProxy Configuration

As part of your PAS networking configuration, you must specify the TLS cipher suites that HAProxy uses to secure its communications. Only specify the cipher suites that you need.

The recommended TLS cipher suites for HAProxy are:

<ul>
  <li>DHE-RSA-AES128-GCM-SHA256</li>
  <li>DHE-RSA-AES256-GCM-SHA384</li>
  <li>ECDHE-RSA-AES128-GCM-SHA256</li>
  <li>ECDHE-RSA-AES256-GCM-SHA384</li>
</ul>

You can specify other cipher suites and a different minimum version of TLS support if your deployment requires it. For a list of other cipher suites and other versions of TLS that are optionally supported by HAProxy, see [ciphers - Cipher Suite Names](https://www.openssl.org/docs/man1.0.2/apps/ciphers.html#CIPHER-SUITE-NAMES) in the OpenSSL documentation.

If you use the default and recommended Gorouter TLS cipher suites in PAS, then ensure you have included these Gorouter TLS cipher suites in your HAProxy TLS cipher suite configuration.

If you change the default Gorouter TLS cipher suites in PAS, and you change the TLS cipher suites for HAProxy, ensure that you have at least one overlapping TLS cipher suite within the two sets.

For instructions on how to configure the TLS cipher suites for HAProxy, see the PAS installation documentation for the IaaS of your deployment. For example, if you are deploying PAS on GCP, see [Step 6: Configure Networking](../../customizing/gcp-er-config.html#networking).

## <a id="components"></a> Component Communications

The following topics describe how network communications work for main subsystem of PCF. Each topic lists the paths, ports, and protocols that the components within the subsystem use to communicate.

* <a href="/pivotalcf/security/networking/cc-network-paths.html">Cloud Controller Network Communications</a>

* <a href="/pivotalcf/security/networking/consul-network-paths.html">Consul Network Communications</a>

* <a href="/pivotalcf/security/networking/diego-network-paths.html">Diego Network Communications</a>

* <a href="/pivotalcf/security/networking/loggregator-network-paths.html">Loggregator Network Communications</a>

* <a href="/pivotalcf/security/networking/mysql-network-paths.html">MySQL Network Communications</a>

* <a href="/pivotalcf/security/networking/nats-network-paths.html">NATS Network Communications</a>

* <a href="/pivotalcf/security/networking/routing-network-paths.html">Routing Network Communications</a>

* <a href="/pivotalcf/security/networking/uaa-network-paths.html">UAA Network Communications</a>
